// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ehandel.DataAccess.Data;

#nullable disable

namespace ehandel.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230525091317_UpdateCompanyTwo")]
    partial class UpdateCompanyTwo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ehandel.Models.ApplicationUserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserAddresses");
                });

            modelBuilder.Entity("ehandel.Models.ApplicationUserCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUserCompanies");
                });

            modelBuilder.Entity("ehandel.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Table lamp"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Light"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bags"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dress"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Decoration"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Essentials"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Interior"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Beauty"
                        });
                });

            modelBuilder.Entity("ehandel.Models.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeOfContact")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "This is a test comment.",
                            Company = "Acme Inc.",
                            Email = "johndoe@example.com",
                            Name = "John Doe",
                            Phone = "123-456-7890",
                            TimeOfContact = new DateTime(2023, 5, 25, 11, 13, 16, 912, DateTimeKind.Local).AddTicks(5365)
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Lorem ipsum dolor sit amet.",
                            Company = "XYZ Corporation",
                            Email = "janesmith@example.com",
                            Name = "Jane Smith",
                            Phone = "987-654-3210",
                            TimeOfContact = new DateTime(2023, 5, 25, 11, 13, 16, 912, DateTimeKind.Local).AddTicks(5369)
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Testing randomization.",
                            Company = "ABC Industries",
                            Email = "michaeljohnson@example.com",
                            Name = "Michael Johnson",
                            Phone = "555-123-4567",
                            TimeOfContact = new DateTime(2023, 5, 25, 11, 13, 16, 912, DateTimeKind.Local).AddTicks(5372)
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Hello world!",
                            Company = "Global Enterprises",
                            Email = "emilydavis@example.com",
                            Name = "Emily Davis",
                            Phone = "111-222-3333",
                            TimeOfContact = new DateTime(2023, 5, 25, 11, 13, 16, 912, DateTimeKind.Local).AddTicks(5375)
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Random comment here.",
                            Company = "Smith & Co.",
                            Email = "davidbrown@example.com",
                            Name = "David Brown",
                            Phone = "444-555-6666",
                            TimeOfContact = new DateTime(2023, 5, 25, 11, 13, 16, 912, DateTimeKind.Local).AddTicks(5379)
                        });
                });

            modelBuilder.Entity("ehandel.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedDateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductRatingId")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductRatingId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 9,
                            CreatedDateTime = "2023-05-25 11:13",
                            Description = "The Apple Watch Series is a cutting-edge wearable device that seamlessly integrates with your iPhone, providing a range of innovative features and functionalities. With its sleek design and advanced technology, it allows you to stay connected, track your fitness, monitor your health, access apps, and receive notifications, all from your wrist.",
                            ImageUrl = "\\img\\placeholders\\270x295.svg",
                            Name = "The Apple Watch Series",
                            Price = 30m,
                            ProductRatingId = 4,
                            SKU = "04acc686-02ca-4e4a-adc1-cb6bb3f297c1"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDateTime = "2023-05-25 11:13",
                            Description = "The Table Lamp is a versatile lighting fixture that adds both functionality and style to any space. With its sleek design and adjustable brightness, it provides the perfect ambiance for reading, working, or creating a cozy atmosphere. Its compact size and sturdy base make it an ideal choice for bedside tables, desks, or any tabletop surface.",
                            ImageUrl = "\\img\\placeholders\\270x295.svg",
                            Name = "Table lamp",
                            Price = 30m,
                            ProductRatingId = 3,
                            SKU = "04acc686-02ca-4e4a-adc1-cb6bb3f297c2"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 8,
                            CreatedDateTime = "2023-05-25 11:13",
                            Description = "The ThinkPad Lenovo laptop is a powerful computing device known for its reliability and performance. Designed for professionals and business users, it offers a robust build, exceptional keyboard, and advanced security features. With its high-quality display, fast processing power, and extensive connectivity options, it empowers users to accomplish tasks efficiently and enhance productivity.",
                            ImageUrl = "\\img\\placeholders\\270x295.svg",
                            Name = "Laptop thinkpad lenovo",
                            Price = 30m,
                            ProductRatingId = 5,
                            SKU = "04acc686-02ca-4e4a-adc1-cb6bb3f297c3"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 8,
                            CreatedDateTime = "2023-05-25 11:13",
                            Description = "Black fashion gumshoes are a trendy footwear choice that combines style and comfort. These sleek and versatile shoes feature a classic black color, making them easy to match with various outfits. With their cushioned soles and breathable materials, they provide all-day comfort for walking or casual wear. Perfect for fashion-forward individuals seeking a blend of elegance and functionality.",
                            ImageUrl = "\\img\\placeholders\\270x295.svg",
                            Name = "Gumshoes black fashion",
                            Price = 80m,
                            ProductRatingId = 5,
                            SKU = "04acc686-02ca-4e4a-adc1-cb6bb3f297c4"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            CreatedDateTime = "2023-05-25 11:13",
                            Description = "The woman's white dress is an elegant and timeless piece that exudes grace and sophistication. Its pristine white color symbolizes purity and femininity, while the flowing fabric drapes beautifully to enhance the wearer's silhouette. Whether worn for a special occasion or a casual outing, this dress radiates effortless style and captures the essence of femininity.",
                            ImageUrl = "\\img\\placeholders\\270x295.svg",
                            Name = "Woman white dress",
                            Price = 30m,
                            ProductRatingId = 5,
                            SKU = "04acc686-02ca-4e4a-adc1-cb6bb3f297c5"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 6,
                            CreatedDateTime = "2023-05-25 11:13",
                            Description = "The kettle water boiler is a convenient and efficient appliance designed to quickly heat water for various purposes. With its sleek and compact design, it effortlessly fits into any kitchen space. Boasting rapid boiling capabilities, it provides hot water in a matter of minutes, making it ideal for brewing tea, coffee, or preparing instant meals. Its easy-to-use features and safety mechanisms ensure a hassle-free and enjoyable boiling experience.",
                            ImageUrl = "\\img\\placeholders\\270x295.svg",
                            Name = "Kettle water boiler",
                            Price = 30m,
                            ProductRatingId = 1,
                            SKU = "04acc686-02ca-4e4a-adc1-cb6bb3f297c6"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 6,
                            CreatedDateTime = "2023-05-25 11:13",
                            Description = "The congee cooking rice cooker is a versatile kitchen appliance that simplifies the process of making congee, a traditional rice porridge dish. With its advanced features and settings, it ensures perfectly cooked and creamy congee every time. Whether you prefer a smooth or chunky texture, this cooker delivers consistent results, making it a convenient choice for congee lovers.",
                            ImageUrl = "\\img\\placeholders\\270x295.svg",
                            Name = "Congee rice cooker",
                            Price = 30m,
                            ProductRatingId = 1,
                            SKU = "04acc686-02ca-4e4a-adc1-cb6bb3f297c7"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 6,
                            CreatedDateTime = "2023-05-25 11:13",
                            Description = "Pizza tomato sauce kebab is a delicious fusion dish that combines the flavors of traditional pizza with the savory taste of kebab. It features a thin crust layered with tangy tomato sauce and topped with tender kebab meat, vegetables, and melted cheese. The combination of these ingredients creates a mouthwatering and satisfying culinary experience that is sure to please pizza and kebab enthusiasts alike.",
                            ImageUrl = "\\img\\placeholders\\270x295.svg",
                            Name = "Pizza tomato sauce kebab",
                            Price = 30m,
                            ProductRatingId = 1,
                            SKU = "04acc686-02ca-4e4a-adc1-cb6bb3f297c8"
                        });
                });

            modelBuilder.Entity("ehandel.Models.ProductRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductRatings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Rating = "1"
                        },
                        new
                        {
                            Id = 2,
                            Rating = "2"
                        },
                        new
                        {
                            Id = 3,
                            Rating = "3"
                        },
                        new
                        {
                            Id = 4,
                            Rating = "4"
                        },
                        new
                        {
                            Id = 5,
                            Rating = "5"
                        });
                });

            modelBuilder.Entity("ehandel.Models.ProductStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "New"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Popular"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Featured"
                        });
                });

            modelBuilder.Entity("ehandel.Models.ProductStatusMapping", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStatusId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ProductStatusId");

                    b.HasIndex("ProductStatusId");

                    b.ToTable("ProductStatusMappings");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            ProductStatusId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            ProductStatusId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            ProductStatusId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            ProductStatusId = 3
                        });
                });

            modelBuilder.Entity("ehandel.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("ApplicationUserAddressId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationUserCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ApplicationUserAddressId");

                    b.HasIndex("ApplicationUserCompanyId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ehandel.Models.Product", b =>
                {
                    b.HasOne("ehandel.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ehandel.Models.ProductRating", "ProductRating")
                        .WithMany()
                        .HasForeignKey("ProductRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ProductRating");
                });

            modelBuilder.Entity("ehandel.Models.ProductStatusMapping", b =>
                {
                    b.HasOne("ehandel.Models.Product", "Product")
                        .WithMany("ProductStatusMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ehandel.Models.ProductStatus", "ProductStatus")
                        .WithMany("ProductStatusMappings")
                        .HasForeignKey("ProductStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductStatus");
                });

            modelBuilder.Entity("ehandel.Models.ApplicationUser", b =>
                {
                    b.HasOne("ehandel.Models.ApplicationUserAddress", "ApplicationUserAddress")
                        .WithMany("Users")
                        .HasForeignKey("ApplicationUserAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ehandel.Models.ApplicationUserCompany", "ApplicationUserCompany")
                        .WithMany("Users")
                        .HasForeignKey("ApplicationUserCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUserAddress");

                    b.Navigation("ApplicationUserCompany");
                });

            modelBuilder.Entity("ehandel.Models.ApplicationUserAddress", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ehandel.Models.ApplicationUserCompany", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ehandel.Models.Product", b =>
                {
                    b.Navigation("ProductStatusMappings");
                });

            modelBuilder.Entity("ehandel.Models.ProductStatus", b =>
                {
                    b.Navigation("ProductStatusMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
